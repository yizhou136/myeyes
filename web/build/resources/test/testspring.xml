<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:respository="http://www.springframework.org/schema/data/repository"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context.xsd  
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd  
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/data/respository
           http://www.springframework.org/schema/data/repository/spring-repository.xsd
           http://www.springframework.org/schema/data/jpa
           http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
           http://www.springframework.org/schema/jdbc
           http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--
    <context:property-placeholder location="classpath:jdbc.properties"/>
    -->
    <context:property-placeholder location="classpath:hsqldb_jdbc.properties"/>
    <context:component-scan base-package="com.zy.myeyes.beans"/>
    <context:component-scan base-package="com.zy.myeyes.test"/>
    <context:component-scan base-package="com.zy.myeyes.dao"/>
    <context:component-scan base-package="com.zy.myeyes.service"/>

    <bean id="sleepAdvice" class="com.zy.myeyes.test.commons.SleepHelper"/>
    <!--
    <bean id="sleepPointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut">
        <property name="pattern" value=".*sleep"/>
    </bean>
    <bean id="sleepAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor">
        <property name="advice" ref="sleepAdvice"/>
        <property name="pointcut" ref="sleepPointcut"/>
    </bean>
    <bean id="sleepProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="human"/>
        <property name="interceptorNames" value="sleepAdvisor2"/>
        <property name="proxyInterfaces" value="com.zy.myeyes.test.commons.Sleepable"/>
    </bean>
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
    <bean id="sleepAdvisor2" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="sleepAdvice"/>
        <property name="pattern" value=".*sleep"/>
    </bean>
    <aop:aspectj-autoproxy/>
    -->
    <bean id="human" class="com.zy.myeyes.test.commons.Human"/>
    <bean id="logUtils" class="com.zy.myeyes.test.commons.LogUtils"/>



    <!-- 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass">
            <value>${jdbc.driverClassName}</value>
        </property>
        <property name="jdbcUrl">
            <value>${jdbc.url}</value>
        </property>
        <property name="user">
            <value>${jdbc.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.password}</value>
        </property>
        <property name="minPoolSize">
            <value>5</value>
        </property>
        <property name="maxPoolSize">
            <value>30</value>
        </property>
        <property name="initialPoolSize">
            <value>10</value>
        </property>
        <property name="maxIdleTime">
            <value>60</value>
        </property>
        <property name="acquireIncrement">
            <value>5</value>
        </property>
        <property name="maxStatements">
            <value>0</value>
        </property>
        <property name="idleConnectionTestPeriod">
            <value>60</value>
        </property>
        <property name="acquireRetryAttempts">
            <value>30</value>
        </property>
        <property name="breakAfterAcquireFailure">
            <value>true</value>
        </property>
        <property name="testConnectionOnCheckout">
            <value>false</value>
        </property>
    </bean>

    <jdbc:embedded-database id="hsql_dataSource" type="HSQL">
        <jdbc:script location="db/myeyes-schema.sql"/>
        <jdbc:script location="db/myeyes-dataload.sql"/>
    </jdbc:embedded-database>

    <!-- 配置Jdbc模板 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <jpa:repositories base-package="com.zy.myeyes"  transaction-manager-ref="jpaTransactionManager"
                    entity-manager-factory-ref="entityManagerFactory"
                    repository-impl-postfix="impl">
        <!--
        <respository:include-filter type="annotation" expression=" execution(* com.zy.myeyes.service..*(..))" />
        -->
    </jpa:repositories>

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="hsql_dataSource"/>
        <property name="packagesToScan" value="com.zy.myeyes.beans"/>
        <property name="persistenceProvider">
            <bean class="org.hibernate.jpa.HibernatePersistenceProvider"/>
        </property>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="generateDdl" value="true"/>
                <property name="database" value="HSQL"/>
                <property name="databasePlatform" value="org.hibernate.dialect.HSQLDialect"/>
                <property name="showSql" value="true"/>
            </bean>
        </property>
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <entry key="hibernate.query.substitutions" value="true 1, false 0"/>
                <entry key="hibernate.default_batch_fetch_size" value="16"/>
                <entry key="hibernate.max_fetch_depth" value="2"/>
                <entry key="hibernate.generate_statistics" value="true"/>
                <entry key="hibernate.bytecode.use_reflection_optimizer" value="true"/>
                <entry key="hibernate.cache.use_second_level_cache" value="true"/>
                <entry key="hibernate.cache.use_query_cache" value="true"/>
                <!--
                <entry key="hibernate.cache.provider_class" value="org.hibernate.cache.ehcache.StrategyRegistrationProviderImpl"/>
                -->
                <entry key="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory"/>
                <entry key="hibernate.cache.provider_configuration" value="classpath:ehcache.xml"/>
            </map>
        </property>
    </bean>
    <!--JPA事务管理器配置-->
    <bean id="jpaTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>


    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource" />

    <!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="serviceMethod"
                      expression=" execution(* com.zy.myeyes.service..*(..))"/>
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />

        <!--
        <aop:aspect ref="logUtils">
            <aop:pointcut id="logsleepPointcut" expression="execution(* com.zy.myeyes.test.commons..*sleep(..))"/>
            <aop:after-returning method="logA" pointcut-ref="logsleepPointcut"/>
            <aop:before method="logB" pointcut-ref="logsleepPointcut"/>
        </aop:aspect>
        -->
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*"  propagation="REQUIRES_NEW" isolation="SERIALIZABLE"/>
            <tx:method name="read*" isolation="REPEATABLE_READ" />
        </tx:attributes>
    </tx:advice>
</beans>